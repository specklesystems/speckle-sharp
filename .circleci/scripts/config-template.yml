version: 2.1

orbs:
  win: circleci/windows@5.0.0
  aws-s3: circleci/aws-s3@2.0.0
  codecov: codecov/codecov@3.2.2
  wait-for: cobli/wait-for@0.0.2
  discord: antonioned/discord@0.1.0
  docker: circleci/docker@2.2.0
  macos: circleci/macos@2.4.1
# The main workflows for our monorepo pipeline.

workflows:
  build:
    jobs:
      - get-ci-tools:
          context: github-dev-bot
      - build-sdk:
          requires:
            - get-ci-tools
  nuget:
    jobs:
      - build-sdk:
          name: nuget-deploy-core
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^(nuget-core|nugets)\/([0-9]+)\.([0-9]+)\.([0-9]+)(?:-\w{1,10})?$/
          post-steps:
            - publish-nugets
          context: nuget

commands:
  cached-checkout:
    steps:
      - checkout

  # Leaving this here to investigate further but currently IT DOES NOT WORK
  # BASH_ENV says it doesn't exist or I don't have access to it.
  set-version-vars:
    steps:
      - run:
          name: Set version environment variables
          command: |
            echo 'export TAG=$(if [ "${CIRCLE_TAG}" ]; then echo $CIRCLE_TAG; else echo "2.0.999"; fi;)' >> "$BASH_ENV"
            echo 'export SEMVER=$(echo "$TAG" | sed -e 's/\/[a-zA-Z-]*//')' >> "$BASH_ENV"
            echo 'export VER=$(echo "$SEMVER" | sed -e 's/-.*//')' >> "$BASH_ENV"
            echo 'export VERSION=$(echo $VER.$WORKFLOW_NUM)' >> "$BASH_ENV"
          environment:
            WORKFLOW_NUM: << pipeline.number >>
  publish-nugets:
    steps:
      - run:
          name: Push nuget packages
          command: $HOME/.dotnet/dotnet nuget push "**/*.nupkg" -s https://api.nuget.org/v3/index.json -k $NUGET_APIKEY -n --skip-duplicate

  run-tests:
    parameters:
      project:
        type: string
      title:
        type: string
    steps:
      - run:
          name: << parameters.title >>
          command: $HOME/.dotnet/dotnet test << parameters.project >>
            -c Release
            -p:IsDesktopBuild=false
            --logger:"junit;LogFileName={assembly}.results.xml"
            --results-directory=TestResults
            --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover

jobs: # Each project will have individual jobs for each specific task it has to execute (build, release...)
  build-sdk:
    docker:
      - image: cimg/base:2021.01
    steps:
      - cached-checkout
      - run:
          name: Install dotnet
          command: |
            curl -sSL https://dot.net/v1/dotnet-install.sh | bash /dev/stdin --channel sts
            curl -sSL https://dot.net/v1/dotnet-install.sh | bash /dev/stdin --version 8.0.204
            $HOME/.dotnet/dotnet --version
      - run:
          name: Enforce formatting
          command: |
            $HOME/.dotnet/dotnet tool restore
            $HOME/.dotnet/dotnet csharpier --check .
      - run:
          name: Build SDK Projects
          command: |
            TAG=$(if [ "${CIRCLE_TAG}" ]; then echo $CIRCLE_TAG; else echo "2.0.999"; fi;)
            NOPREFIX=$(echo $TAG | sed -e 's/^[a-zA-Z]*\///') 
            SEMVER=$(echo "$NOPREFIX" | sed -e 's/\/[a-zA-Z-]*//')
            VER=$(echo "$SEMVER" | sed -e 's/-.*//')
            VERSION=$(echo $VER.$WORKFLOW_NUM)
            $HOME/.dotnet/dotnet build SDK.slnf -c Release -p:IsDesktopBuild=false -p:Version=$SEMVER -p:FileVersion=$VERSION
          environment:
            WORKFLOW_NUM: << pipeline.number >>
      - run:
          name: Build nuget packages
          command: |
            TAG=$(if [ "${CIRCLE_TAG}" ]; then echo $CIRCLE_TAG; else echo "2.0.999"; fi;)
            NOPREFIX=$(echo $TAG | sed -e 's/^[a-zA-Z]*\///') 
            SEMVER=$(echo "$NOPREFIX" | sed -e 's/\/[a-zA-Z-]*//')
            VER=$(echo "$SEMVER" | sed -e 's/-.*//')
            VERSION=$(echo $VER.$WORKFLOW_NUM)
            $HOME/.dotnet/dotnet pack All.sln -p:Version=$SEMVER -p:FileVersion=$VERSION -c Release -p:IsDesktopBuild=false
          environment:
            WORKFLOW_NUM: << pipeline.number >>
      - run-tests:
          title: Core Unit Tests
          project: Core/Tests/Speckle.Core.Tests.Unit/Speckle.Core.Tests.Unit.csproj
      - run-tests:
          title: Objects Unit Tests
          project: Objects/Tests/Objects.Tests.Unit/Objects.Tests.Unit.csproj
      - store_test_results:
          path: TestResults

  test-core:
    machine:
      image: ubuntu-2204:2023.02.1
    resource_class: large
    steps:
      - cached-checkout
      - run:
          name: Install dotnet
          command: |
            curl -sSL https://dot.net/v1/dotnet-install.sh | bash /dev/stdin --channel sts
            curl -sSL https://dot.net/v1/dotnet-install.sh | bash /dev/stdin --version 8.0.204
            $HOME/.dotnet/dotnet --version
      - run:
          name: Startup the Speckle Server
          command: docker compose -f Core/docker-compose.yml up -d
      - run-tests:
          title: Core Integration Tests
          project: Core/Tests/Speckle.Core.Tests.Integration/Speckle.Core.Tests.Integration.csproj
      - run-tests:
          title: Automate Integration Tests
          project: Automate/Tests/Speckle.Automate.Sdk.Tests.Integration/Speckle.Automate.Sdk.Tests.Integration.csproj
      - store_test_results:
          path: TestResults

  build-connector: # Reusable job for basic connectors
    executor:
      name: win/default
      shell: powershell.exe
    parameters:
      slnname:
        type: string
      projname:
        type: string
        default: ""
      dllname:
        type: string
      slug:
        type: string
        default: ""
      build-with-msbuild:
        type: boolean
        default: true
      installer:
        type: boolean
        default: false
    environment:
      SSM: 'C:\Program Files\DigiCert\DigiCert One Signing Manager Tools'
    steps:
      - cached-checkout
      - attach_workspace:
          at: ./
      - run:
          name: Restore << parameters.slnname >>
          command: nuget restore << parameters.slnname >>/<< parameters.slnname >>.sln
      - when:
          condition: << parameters.build-with-msbuild >>
          steps:
            - run:
                name: Build << parameters.slnname >>
                command: |
                  $tag = if([string]::IsNullOrEmpty($env:CIRCLE_TAG)) { "2.0.999" } else { $env:CIRCLE_TAG }
                  $semver = if($tag.Contains('/')) {$tag.Split("/")[0] } else { $tag }
                  $ver = if($semver.Contains('-')) {$semver.Split("-")[0] } else { $semver }
                  $version = "$($ver).$($env:WORKFLOW_NUM)"
                  msbuild << parameters.slnname >>/<< parameters.slnname >>.sln /p:Configuration=Release /p:IsDesktopBuild=false /p:Version=$semver /p:FileVersion=$version
                environment:
                  WORKFLOW_NUM: << pipeline.number >>
      - unless:
          condition: << parameters.build-with-msbuild >>
          steps:
            - run:
                name: Build << parameters.slnname >>
                command: |
                  $tag = if([string]::IsNullOrEmpty($env:CIRCLE_TAG)) { "2.0.999" } else { $env:CIRCLE_TAG }
                  $semver = if($tag.Contains('/')) {$tag.Split("/")[0] } else { $tag }
                  $ver = if($semver.Contains('-')) {$semver.Split("-")[0] } else { $semver }
                  $version = "$($ver).$($env:WORKFLOW_NUM)"
                  dotnet publish << parameters.slnname >>/<< parameters.slnname >>/<< parameters.projname >>.csproj -c Release -r win-x64 --self-contained /p:IsDesktopBuild=false /p:Version=$semver /p:FileVersion=$version
                environment:
                  WORKFLOW_NUM: << pipeline.number >>
      - run:
          name: Exit if External PR
          shell: bash.exe
          command: if [ "$CIRCLE_PR_REPONAME" ]; then circleci-agent step halt; fi
      - unless: # Build installers unsigned on non-tagged builds
          condition: << pipeline.git.tag >>
          steps:
            - run:
                name: Build Installer
                command: speckle-sharp-ci-tools\InnoSetup\ISCC.exe speckle-sharp-ci-tools\%SLUG%.iss /Sbyparam=$p
                shell: cmd.exe #does not work in powershell
                environment:
                  SLUG: << parameters.slug >>
      - when: # Setup certificates and build installers signed for tagged builds
          condition: << pipeline.git.tag >>
          steps:
            - run:
                name: "Digicert Signing Manager Setup"
                command: |
                  cd C:\
                  curl.exe -X GET  https://one.digicert.com/signingmanager/api-ui/v1/releases/smtools-windows-x64.msi/download -H "x-api-key:$env:SM_API_KEY" -o smtools-windows-x64.msi
                  msiexec.exe /i smtools-windows-x64.msi /quiet /qn | Wait-Process
            - run:
                name: Setup Digicert ONE Client Cert
                command: |
                  cd C:\
                  echo $env:SM_CLIENT_CERT_FILE_B64 > certificate.txt
                  certutil -decode certificate.txt certificate.p12
            - run:
                name: Sync Certs
                command: |
                  & $env:SSM\smksp_cert_sync.exe
            - run:
                name: Build Installer
                command: speckle-sharp-ci-tools\InnoSetup\ISCC.exe speckle-sharp-ci-tools\%SLUG%.iss /Sbyparam=$p /DSIGN_INSTALLER /DCODE_SIGNING_CERT_FINGERPRINT=%SM_CODE_SIGNING_CERT_SHA1_HASH%
                shell: cmd.exe #does not work in powershell
                environment:
                  SLUG: << parameters.slug >>
            - persist_to_workspace:
                root: ./
                paths:
                  - speckle-sharp-ci-tools/Installers

  deploy-connector-new:
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:6.0
    parameters:
      slug:
        type: string
      os:
        type: string
      extension:
        type: string
      arch:
        type: string
        default: Any
    steps:
      - attach_workspace:
          at: ./
      - run:
          name: Install Manager Feed CLI
          command: dotnet tool install --global Speckle.Manager.Feed
      - run:
          name: Upload new version
          command: |
            TAG=$(if [ "${CIRCLE_TAG}" ]; then echo $CIRCLE_TAG; else echo "2.0.999"; fi;)
            SEMVER=$(echo "$TAG" | sed -e 's/\/[a-zA-Z-]*//')
            VER=$(echo "$SEMVER" | sed -e 's/-.*//')
            VERSION=$(echo $VER.$WORKFLOW_NUM)
            /root/.dotnet/tools/Speckle.Manager.Feed deploy -s << parameters.slug >> -v ${SEMVER} -u https://releases.speckle.dev/installers/<< parameters.slug >>/<< parameters.slug >>-${SEMVER}.<< parameters.extension >> -o << parameters.os >> -a << parameters.arch >> -f speckle-sharp-ci-tools/Installers/<< parameters.slug >>/<< parameters.slug >>-${SEMVER}.<< parameters.extension >>
          environment:
            WORKFLOW_NUM: << pipeline.number >>

  build-connector-mac:
    macos:
      xcode: 13.4.1
    resource_class: macos.m1.medium.gen1
    parameters:
      slnname:
        type: string
      projname:
        type: string
        default: ""
      slug:
        type: string
        default: ""
      installer:
        type: boolean
        default: false
      converter-files:
        type: string
        default: ""
      installername:
        type: string
        default: ""
      build-config:
        type: string
        default: Release
      build-with-mono:
        type: boolean
        default: true
      bundlename:
        type: string
        default: ""
    steps:
      - macos/install-rosetta
      - cached-checkout
      - attach_workspace:
          at: ./
      - run:
          name: Install dotnet
          command: |
            curl -sSL https://dot.net/v1/dotnet-install.sh | bash /dev/stdin --channel sts
            curl -sSL https://dot.net/v1/dotnet-install.sh | bash /dev/stdin --version 8.0.204

            $HOME/.dotnet/dotnet --version
            $HOME/.dotnet/dotnet --list-runtimes
            $HOME/.dotnet/dotnet --list-sdks
      - when:
          condition: << parameters.build-with-mono >>
          steps:
            - run:
                name: Install mono
                command: |
                  HOMEBREW_NO_AUTO_UPDATE=1 HOMEBREW_NO_INSTALL_CLEANUP=1 brew install mono mono-libgdiplus
      - run:
          name: Create installer target dir
          command: |
            mkdir -p speckle-sharp-ci-tools/Installers/<< parameters.slug >>
      - when:
          condition: << parameters.build-with-mono >>
          steps:
            - run:
                name: Build << parameters.slnname >>
                command: |
                  TAG=$(if [ "${CIRCLE_TAG}" ]; then echo $CIRCLE_TAG; else echo "2.0.999"; fi;)
                  SEMVER=$(echo "$TAG" | sed -e 's/\/[a-zA-Z-]*//')
                  VER=$(echo "$SEMVER" | sed -e 's/-.*//')
                  VERSION=$(echo $VER.$WORKFLOW_NUM)
                  msbuild << parameters.slnname >>/<< parameters.slnname >>.sln /r /p:Configuration='<< parameters.build-config >>' /p:IsDesktopBuild=false /p:Version=$SEMVER /p:FileVersion=$VERSION
                environment:
                  WORKFLOW_NUM: << pipeline.number >>
      - unless:
          condition: << parameters.build-with-mono >>
          steps:
            - run:
                name: Publish x64 and arm64
                command: |
                  TAG=$(if [ "${CIRCLE_TAG}" ]; then echo $CIRCLE_TAG; else echo "2.0.999"; fi;)
                  SEMVER=$(echo "$TAG" | sed -e 's/\/[a-zA-Z-]*//')
                  VER=$(echo "$SEMVER" | sed -e 's/-.*//')
                  VERSION=$(echo $VER.$WORKFLOW_NUM)
                  $HOME/.dotnet/dotnet publish << parameters.slnname >>/<< parameters.projname >>/<< parameters.projname >>.csproj -c Release -r osx-arm64 --self-contained /p:IsDesktopBuild=false /p:Version=$SEMVER /p:FileVersion=$VERSION
                  $HOME/.dotnet/dotnet publish << parameters.slnname >>/<< parameters.projname >>/<< parameters.projname >>.csproj -c Release -r osx-x64 --self-contained /p:IsDesktopBuild=false /p:Version=$SEMVER /p:FileVersion=$VERSION
                environment:
                  WORKFLOW_NUM: << pipeline.number >>
      # Create installer
      - run:
          name: Exit if External PR
          command: if [ "$CIRCLE_PR_REPONAME" ]; then circleci-agent step halt; fi
      # Zip files for installer
      - when:
          condition: << parameters.build-with-mono >>
          steps:
            # Compress build files
            - run:
                name: Zip Objects Kit files
                command: |
                  zip -j Objects.zip << parameters.converter-files >>
            - run:
                name: Zip Connector files
                command: |
                  cd << parameters.slnname >>/<< parameters.projname >>/bin/
                  zip -r <<parameters.slug>>.zip ./
            # Copy installer files
            - run:
                name: Copy files to installer
                command: |
                  mkdir -p speckle-sharp-ci-tools/Mac/<<parameters.installername>>/.installationFiles/
                  cp Objects.zip speckle-sharp-ci-tools/Mac/<<parameters.installername>>/.installationFiles
                  cp << parameters.slnname >>/<< parameters.projname >>/bin/<<parameters.slug>>.zip speckle-sharp-ci-tools/Mac/<<parameters.installername>>/.installationFiles
      - unless:
          condition: << parameters.build-with-mono >>
          steps:
            - run:
                name: Create app bundles
                command: |
                  sh ./speckle-sharp-ci-tools/Mac/AppBundle/bundle.sh ./<< parameters.slnname >>/<< parameters.slnname >>/bin/Release/net6.0/osx-arm64/publish/ ./<< parameters.slnname >>/<< parameters.slnname >>/Info.plist ./<< parameters.slnname >>/<< parameters.slnname >>/Assets/icon-mac.icns ./<< parameters.slnname >>/<< parameters.slnname >>/bin/Release/net6.0/osx-arm64/<< parameters.slnname >>
                  sh ./speckle-sharp-ci-tools/Mac/AppBundle/bundle.sh ./<< parameters.slnname >>/<< parameters.slnname >>/bin/Release/net6.0/osx-x64/publish/ ./<< parameters.slnname >>/<< parameters.slnname >>/Info.plist ./<< parameters.slnname >>/<< parameters.slnname >>/Assets/icon-mac.icns ./<< parameters.slnname >>/<< parameters.slnname >>/bin/Release/net6.0/osx-x64/<< parameters.slnname >>
            - run:
                name: Zip Connector files
                command: |
                  cd "<< parameters.slnname >>/<< parameters.slnname >>/bin/Release/net6.0/osx-arm64/"
                  zip -r << parameters.slug >>-mac-arm64.zip "./<< parameters.slnname >>.app"
                  cd "../osx-x64/"
                  zip -r << parameters.slug >>-mac-x64.zip "./<< parameters.slnname >>.app"
            # Copy installer files
            - run:
                name: Copy files to installer
                command: |
                  mkdir -p speckle-sharp-ci-tools/Mac/<< parameters.installername >>/.installationFiles/
                  cp << parameters.slnname >>/<< parameters.slnname >>/bin/Release/net6.0/osx-arm64/<< parameters.slug >>-mac-arm64.zip speckle-sharp-ci-tools/Mac/<<parameters.installername>>/.installationFiles
                  cp << parameters.slnname >>/<< parameters.slnname >>/bin/Release/net6.0/osx-x64/<< parameters.slug >>-mac-x64.zip speckle-sharp-ci-tools/Mac/<<parameters.installername>>/.installationFiles

      - run:
          name: Build Mac installer
          command: ~/.dotnet/dotnet publish speckle-sharp-ci-tools/Mac/<<parameters.installername>>/<<parameters.installername>>.sln -r osx-x64 -c Release
      - run:
          name: Zip installer
          command: |
            cd speckle-sharp-ci-tools/Mac/<<parameters.installername>>/bin/Release/net6.0/osx-x64/publish/
            zip -r <<parameters.slug>>.zip ./
      - store_artifacts:
          path: speckle-sharp-ci-tools/Mac/<<parameters.installername>>/bin/Release/net6.0/osx-x64/publish/<<parameters.slug>>.zip
      - run:
          name: Copy to installer location
          command: |
            TAG=$(if [ "${CIRCLE_TAG}" ]; then echo $CIRCLE_TAG; else echo "2.0.999"; fi;)
            SEMVER=$(echo "$TAG" | sed -e 's/\/[a-zA-Z-]*//')
            VER=$(echo "$SEMVER" | sed -e 's/-.*//')
            VERSION=$(echo $VER.$WORKFLOW_NUM)
            cp speckle-sharp-ci-tools/Mac/<<parameters.installername>>/bin/Release/net6.0/osx-x64/publish/<<parameters.slug>>.zip speckle-sharp-ci-tools/Installers/<< parameters.slug >>/<<parameters.slug>>-$SEMVER.zip
          environment:
            WORKFLOW_NUM: << pipeline.number >>
      - when:
          condition: << pipeline.git.tag >>
          steps:
            - persist_to_workspace:
                root: ./
                paths:
                  - speckle-sharp-ci-tools/Installers

  build-connector-dotnet-mac:
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:7.0
    parameters:
      slnname:
        type: string
      projname:
        type: string
        default: ""
      slug:
        type: string
        default: ""
      converter-files:
        type: string
        default: ""
      installername:
        type: string
        default: ""
      build-config:
        type: string
        default: Release
    steps:
      - cached-checkout
      - attach_workspace:
          at: ./
      - run:
          name: Create installer target directory
          command: |
            mkdir -p speckle-sharp-ci-tools/Installers/<< parameters.slug >>
      - run:
          name: Build
          command: |
            TAG=$(if [ "${CIRCLE_TAG}" ]; then echo $CIRCLE_TAG; else echo "2.0.999"; fi;)
            SEMVER=$(echo "$TAG" | sed -e 's/\/[a-zA-Z-]*//')
            VER=$(echo "$SEMVER" | sed -e 's/-.*//')
            VERSION=$(echo $VER.$WORKFLOW_NUM)
            dotnet build << parameters.slnname >>/<< parameters.slnname >>.slnf -c "<< parameters.build-config >>" -p:Version=$SEMVER -p:FileVersion=$VERSION -p:IsDesktopBuild=false
          environment:
            WORKFLOW_NUM: << pipeline.number >>
      - run:
          name: Install Zip
          command: |
            apt-get update -y
            apt-get install zip -y
      - run:
          name: Zip Objects Kit files
          command: |
            zip -j Objects.zip << parameters.converter-files >>
      - run:
          name: Zip Connector files
          command: |
            cd << parameters.slnname >>/<< parameters.projname >>/bin/
            zip -r <<parameters.slug>>.zip ./
      - run:
          name: Copy files to installer
          command: |
            mkdir -p speckle-sharp-ci-tools/Mac/<<parameters.installername>>/.installationFiles/
            cp Objects.zip speckle-sharp-ci-tools/Mac/<<parameters.installername>>/.installationFiles
            cp << parameters.slnname >>/<< parameters.projname >>/bin/<<parameters.slug>>.zip speckle-sharp-ci-tools/Mac/<<parameters.installername>>/.installationFiles
      # Create installer
      - run:
          name: Exit if External PR
          command: if [ "$CIRCLE_PR_REPONAME" ]; then circleci-agent step halt; fi
      - run:
          name: Build Mac installer
          command: dotnet publish speckle-sharp-ci-tools/Mac/<<parameters.installername>>/<<parameters.installername>>.sln -r osx-x64 -c Release
      - run:
          name: Zip installer
          command: |
            cd speckle-sharp-ci-tools/Mac/<<parameters.installername>>/bin/Release/net6.0/osx-x64/publish/
            zip -r <<parameters.slug>>.zip ./
      - store_artifacts:
          path: speckle-sharp-ci-tools/Mac/<<parameters.installername>>/bin/Release/net6.0/osx-x64/publish/<<parameters.slug>>.zip
      - run:
          name: Copy to installer location
          command: |
            TAG=$(if [ "${CIRCLE_TAG}" ]; then echo $CIRCLE_TAG; else echo "2.0.999"; fi;)
            SEMVER=$(echo "$TAG" | sed -e 's/\/[a-zA-Z-]*//')
            VER=$(echo "$SEMVER" | sed -e 's/-.*//')
            VERSION=$(echo $VER.$WORKFLOW_NUM)
            cp speckle-sharp-ci-tools/Mac/<<parameters.installername>>/bin/Release/net6.0/osx-x64/publish/<<parameters.slug>>.zip speckle-sharp-ci-tools/Installers/<< parameters.slug >>/<<parameters.slug>>-$SEMVER.zip
          environment:
            WORKFLOW_NUM: << pipeline.number >>
      - when:
          condition: << pipeline.git.tag >>
          steps:
            - persist_to_workspace:
                root: ./
                paths:
                  - speckle-sharp-ci-tools/Installers

  get-ci-tools: # Clones our ci tools and persists them to the workspace
    docker:
      - image: cimg/base:2021.01
    steps:
      - add_ssh_keys:
          fingerprints:
            - "62:b2:1a:86:b7:9f:83:91:9b:61:f8:52:66:38:78:64"
      - run:
          name: I know Github as a host
          command: |
            mkdir ~/.ssh
            ssh-keyscan github.com >> ~/.ssh/known_hosts
      - run:
          name: Clone
          command: git clone git@github.com:specklesystems/speckle-sharp-ci-tools.git speckle-sharp-ci-tools
      - run:
          name: Checkout branch
          command: |
            cd speckle-sharp-ci-tools
            if [ -z "$CIRCLE_TAG" ]
            then
                  git checkout ${CIRCLE_BRANCH} || git checkout main
            else
                  git checkout ${CIRCLE_TAG} || git checkout main
            fi

      - persist_to_workspace:
          root: ./
          paths:
            - speckle-sharp-ci-tools

  build-archicad-add-on: # build Archicad C++ add-on
    parameters:
      archicadversion:
        type: string
        default: ""
    executor:
      name: win/server-2019
      shell: bash.exe
      version: 2023.04.1 # Version 2023.08.01 broke this step due to missing MSVC v142 C++ build tools. Fixed to the prior working version till a fix is issued.
    steps:
      - cached-checkout
      - attach_workspace:
          at: ./
      - run:
          name: Install cmake
          command: |
            choco install cmake -y
      - run:
          name: Get Archicad devkit
          command: |
            mkdir Resources
            cd Resources
            curl -o Archicad<<parameters.archicadversion>>DevKit.zip https://releases.speckle.dev/build-utils/Archicad<<parameters.archicadversion>>DevKit.zip
            unzip Archicad<<parameters.archicadversion>>DevKit.zip -d Archicad<<parameters.archicadversion>>DevKit
      - run:
          name: Generate cmake files
          command: |
            cd ConnectorArchicad/AddOn
            mkdir Build.Win.x64.<<parameters.archicadversion>>
            export PATH=$PATH:"C:\Program Files\CMake\bin"
            cmake -B "./Build.Win.x64.<<parameters.archicadversion>>/" -A "x64" -T "v142" -DAC_API_DEVKIT_DIR="../../Resources/Archicad<<parameters.archicadversion>>DevKit" -DAC_MDID_DEV=${GRAPHISOFT_DEV_ID:-1} -DAC_MDID_LOC=${GRAPHISOFT_ADDON_ID:-1}
      - run:
          name: Build add-on
          command: |
            cd ConnectorArchicad/AddOn
            "C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/MSBuild/Current/Bin/MSBuild.exe" "Build.Win.x64.<<parameters.archicadversion>>/Speckle Connector.sln" -property:Configuration=Release
      - persist_to_workspace:
          root: ./
          paths:
            - ConnectorArchicad/AddOn/Build.Win.x64.<<parameters.archicadversion>>

  build-archicad-add-on-mac: # build Archicad C++ add-on
    macos:
      xcode: 13.4.1
    resource_class: macos.m1.medium.gen1
    parameters:
      archicadversion:
        type: string
        default: ""
      slug:
        type: string
        default: ""
      installername:
        type: string
        default: ""
    steps:
      - macos/install-rosetta
      - cached-checkout
      - attach_workspace:
          at: ./
      - run:
          name: Install cmake
          command: |
            HOMEBREW_NO_AUTO_UPDATE=1 HOMEBREW_NO_INSTALL_CLEANUP=1 brew install cmake
      - run:
          name: Get Archicad devkit
          command: |
            mkdir Resources
            cd Resources
            curl -o Archicad<<parameters.archicadversion>>DevKitMac.zip https://releases.speckle.dev/build-utils/Archicad<<parameters.archicadversion>>DevKitMac.zip
            unzip Archicad<<parameters.archicadversion>>DevKitMac.zip -d Archicad<<parameters.archicadversion>>DevKitMac
      - run:
          name: Generate cmake files
          command: |
            cd ConnectorArchicad/AddOn
            mkdir Build.macOS.x64.<<parameters.archicadversion>>
            cmake -B "./Build.macOS.x64.<<parameters.archicadversion>>/" -G 'Xcode' -DCMAKE_OSX_ARCHITECTURES=x86_64 -DAC_API_DEVKIT_DIR="../../Resources/Archicad<<parameters.archicadversion>>DevKitMac" -DAC_MDID_DEV=${GRAPHISOFT_DEV_ID:-1} -DAC_MDID_LOC=${GRAPHISOFT_ADDON_ID:-1}
      - run:
          name: Build add-on
          command: |
            cd ConnectorArchicad/AddOn
            xcodebuild -scheme ALL_BUILD -configuration Release -project Build.macOS.x64.<<parameters.archicadversion>>/Speckle\ Connector.xcodeproj build
      # Compress build files
      - run:
          name: Zip Connector files
          command: |
            cd ConnectorArchicad/AddOn/Build.macOS.x64.<< parameters.archicadversion >>/Release
            zip -r << parameters.slug >>-<< parameters.archicadversion >>-mac.zip ./Speckle\ Connector.bundle
      # Copy installer files
      - run:
          name: Copy files to installer
          command: |
            mkdir -p speckle-sharp-ci-tools/Mac/<< parameters.installername >>/.installationFiles/
            cp ConnectorArchicad/AddOn/Build.macOS.x64.<< parameters.archicadversion >>/Release/<< parameters.slug >>-<<parameters.archicadversion>>-mac.zip speckle-sharp-ci-tools/Mac/<< parameters.installername >>/.installationFiles
      - persist_to_workspace:
          root: ./
          paths:
            - speckle-sharp-ci-tools/Mac/<< parameters.installername >>/.installationFiles/

  deploy-connectors: # Uploads all installers found to S3
    docker:
      - image: cimg/base:2021.01
    steps:
      - run:
          name: Proceed to deploy
          command: echo "This step is just here to wait for all build jobs before proceeding to deploy each of them individually. If a job fails, no connector will be deployed."

  notify-deploy:
    docker:
      - image: cimg/base:2021.01
    steps:
      - discord/status:
          mentions: "1067457311980933140"
          success_message:
            ":tada: a new version of Speckle-Sharp connectors was build
            successfully!"
          failure_message: ":red_circle: oh no! Speckle-Sharp connectors build has failed!"
