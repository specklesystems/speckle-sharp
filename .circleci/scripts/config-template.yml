version: 2.1

orbs:
  win: circleci/windows@5.0.0
  aws-s3: circleci/aws-s3@2.0.0
  codecov: codecov/codecov@3.2.2
  wait-for: cobli/wait-for@0.0.2

commands:
  packandpublish:
    parameters:
      projectfilepath:
        type: string
    steps:
      - run:
          name: Publish nuget package
          command: |
            $tag = if([string]::IsNullOrEmpty($env:CIRCLE_TAG)) { "2.0.999.$($env:WORKFLOW_NUM)" } else { $env:CIRCLE_TAG }
            $version = $tag.Split("/")[1]  
            msbuild <<parameters.projectfilepath>> /p:Version="$version" /p:Configuration=Release /p:WarningLevel=0 /p:IsDesktopBuild=false -t:pack
            dotnet nuget push "**/*.nupkg" -s https://api.nuget.org/v3/index.json -k $env:NUGET_APIKEY -n --skip-duplicate
          environment:
            WORKFLOW_NUM: << pipeline.number >>
  packandpublish-bash:
    parameters:
      projectfilepath:
        type: string
    steps:
      - run:
          name: Publish nuget package
          command: |
            TAG=$(if [ "${CIRCLE_TAG}" ]; then echo $CIRCLE_TAG; else echo "2.0.999.$WORKFLOW_NUM"; fi;)
            SEMVER=$(echo "$TAG" | sed -e 's/\/[a-zA-Z-]+//')
            VERSION=$(echo "$SEMVER" | sed -e 's/[a-zA-Z]*\///')
            msbuild <<parameters.projectfilepath>> /p:Version="$VERSION" /p:Configuration=Release /p:WarningLevel=0 /p:IsDesktopBuild=false -t:pack
            ~/.dotnet/dotnet nuget push "**/*.nupkg" -s https://api.nuget.org/v3/index.json -k $NUGET_APIKEY -n --skip-duplicate
          environment:
            WORKFLOW_NUM: << pipeline.number >>
jobs: # Each project will have individual jobs for each specific task it has to execute (build, release...)
  build-core:
    executor: # Using a win executor since there are post-steps in the nuget workflow that use powershell
      name: win/default
      shell: powershell.exe
    steps:
      - checkout
      - run:
          name: Build Core
          command: dotnet build Core/Core.sln -c Release -v q

  test-core:
    docker:
      - image: "mcr.microsoft.com/dotnet/sdk:6.0" # dotnet
      # - image: "mcr.microsoft.com/dotnet/core/sdk:2.1-focal" # dotnet core 2.1 sdk (for netstandard support on build)
      # Node, redis, postgres and speckle-server images for test server
      - image: "cimg/node:16.15"
      - image: "cimg/redis:7.0.5"
      - image: "cimg/postgres:14.5"
        environment:
          POSTGRES_DB: speckle2_test
          POSTGRES_PASSWORD: speckle
          POSTGRES_USER: speckle
      - image: "minio/minio"
        command: server /data --console-address ":9001"
      - image: "speckle/speckle-server:latest"
        command: ["bash", "-c", "/wait && node bin/www"]
        environment:
          POSTGRES_URL: "127.0.0.1"
          POSTGRES_USER: "speckle"
          POSTGRES_PASSWORD: "speckle"
          POSTGRES_DB: "speckle2_test"
          REDIS_URL: "redis://127.0.0.1"
          SESSION_SECRET: "keyboard cat"
          STRATEGY_LOCAL: "true"
          CANONICAL_URL: "http://localhost:3000"
          S3_ENDPOINT: "http://127.0.0.1:9000"
          S3_ACCESS_KEY: "minioadmin"
          S3_SECRET_KEY: "minioadmin"
          S3_BUCKET: "speckle-server"
          S3_CREATE_BUCKET: "true"
          WAIT_HOSTS: 127.0.0.1:5432, 127.0.0.1:6379, 127.0.0.1:9000
    steps:
      - checkout
      - run:
          name: Unit Test
          command: dotnet test Core/Tests/TestsUnit.csproj -c Release -v q --logger:"junit;LogFileName={assembly}.results.xml" --results-directory=TestResults --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
      - run:
          name: Integration Tests # The integration tests are runinng on our test sevrer
          command: dotnet test Core/IntegrationTests/TestsIntegration.csproj -c Release -v q --logger:"junit;LogFileName={assembly}.results.xml" --results-directory=TestResults --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
      - store_test_results:
          path: TestResults
      - store_artifacts:
          path: TestResults

      #- codecov/upload

  build-objects:
    macos:
      xcode: 12.5.1
    steps:
      - checkout
      - run:
          name: Install mono
          command: |
            HOMEBREW_NO_AUTO_UPDATE=1 brew install mono mono-libgdiplus
      - run:
          name: Install dotnet
          command: |
            curl -sSL https://dot.net/v1/dotnet-install.sh | bash /dev/stdin
            curl -sSL https://dot.net/v1/dotnet-install.sh | bash /dev/stdin --channel 3.1
      - run:
          name: Restore Objects
          command: ~/.dotnet/dotnet restore Objects/Objects.sln
      - run:
          name: Build Objects
          command: ~/.dotnet/dotnet build --no-restore Objects/Objects/Objects.csproj -c Release /p:WarningLevel=0 /p:IsDesktopBuild=false
      - run:
          name: Test Objects
          command: ~/.dotnet/dotnet test Objects/Tests/Tests.csproj --no-restore -c Release -v q --logger:"junit;LogFileName={assembly}.results.xml" --results-directory=TestResults --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
      - store_test_results:
          path: TestResults
      - store_artifacts:
          path: TestResults
      # Upload to codecov if necessary
      # Currently disabled until we figure out a strategy to
      # upload Core and Objects at once
      # - codecov/upload

  build-desktopui:
    executor: # Using a win executor since there are post-steps in the nuget workflow that use powershell
      name: win/default
      shell: powershell.exe
    steps:
      - checkout
      - run:
          name: Build DesktopUI2
          command: dotnet build DesktopUI2/DesktopUI2.sln -c Release -v q

  build-connector: # Reusable job for basic connectors
    executor:
      name: win/default
      shell: powershell.exe
    parameters:
      slnname:
        type: string
      dllname:
        type: string
      slug:
        type: string
        default: ""
      installer:
        type: boolean
        default: false
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - run:
          name: Restore << parameters.slnname >>
          command: nuget restore << parameters.slnname >>/<< parameters.slnname >>.sln
      - run:
          name: Build << parameters.slnname >>
          command: |
            $tag = if([string]::IsNullOrEmpty($env:CIRCLE_TAG)) { "2.0.999" } else { $env:CIRCLE_TAG }
            $semver = if($tag.Contains('/')) {$tag.Split("/")[0] } else { $tag }
            $ver = if($semver.Contains('-')) {$semver.Split("-")[0] } else { $semver }
            $version = "$($ver).$($env:WORKFLOW_NUM)"
            msbuild << parameters.slnname >>/<< parameters.slnname >>.sln /p:Configuration=Release /p:WarningLevel=0 /p:IsDesktopBuild=false /p:AssemblyVersionNumber=$version /p:AssemblyInformationalVersion=$semver /p:Version=$semver
          environment:
            WORKFLOW_NUM: << pipeline.number >>
      - run:
          name: Create Innosetup signing cert
          command: |
            echo $env:PFX_B64 > "speckle-sharp-ci-tools\SignTool\AEC Systems Ltd.txt"
            certutil -decode "speckle-sharp-ci-tools\SignTool\AEC Systems Ltd.txt" "speckle-sharp-ci-tools\SignTool\AEC Systems Ltd.pfx"
      - run:
          name: Build Installer
          command: speckle-sharp-ci-tools\InnoSetup\ISCC.exe speckle-sharp-ci-tools\%SLUG%.iss /Sbyparam=$p
          shell: cmd.exe #does not work in powershell
          environment:
            SLUG: << parameters.slug >>
      # - when:
      #     condition:
      #       equal: [teklastructures, << parameters.slug >>] # Tekla Structures has it's own "plugin packager", so we do this instead of the ISS step
      #     steps:
      #       - run:
      #           name: Build TSEP
      #           command: speckle-sharp-ci-tools/TSEPBuilder/TeklaExtensionPackage.BatchBuilder.exe -I "$($env:CIRCLE_WORKING_DIRECTORY)\ConnectorTeklaStructures\ConnectorTeklaStructures2021\ManifestGenerator.xml" -O "$($env:CIRCLE_WORKING_DIRECTORY)\speckle-sharp-ci-tools\Installers\<<parameters.slug>>\<<parameters.dllname>>.tsep"
      #       - store_artifacts:
      #           path: speckle-sharp-ci-tools/Installers/<<parameters.slug>>/
      - when:
          condition: << pipeline.git.tag >>
          steps:
            - persist_to_workspace:
                root: ./
                paths:
                  - speckle-sharp-ci-tools/Installers

  deploy-connector-new:
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:6.0
    parameters:
      slug:
        type: string
      os:
        type: string
      extension:
        type: string
      arch:
        type: string
        default: Any
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - run:
          name: Install Manager Feed CLI
          command: dotnet tool install --global Speckle.Manager.Feed
      - run:
          name: Upload new version
          command: |
            TAG=$(if [ "${CIRCLE_TAG}" ]; then echo $CIRCLE_TAG; else echo "2.0.999.$WORKFLOW_NUM"; fi;)
            SEMVER=$(echo "$TAG" | sed -e 's/\/[a-zA-Z-]*//')
            /root/.dotnet/tools/Speckle.Manager.Feed deploy -s << parameters.slug >> -v ${SEMVER} -u https://releases.speckle.dev/installers/<< parameters.slug >>/<< parameters.slug >>-${SEMVER}.<< parameters.extension >> -o << parameters.os >> -a << parameters.arch >> -f speckle-sharp-ci-tools/Installers/<< parameters.slug >>/<< parameters.slug >>-${SEMVER}.<< parameters.extension >>
          environment:
            WORKFLOW_NUM: << pipeline.number >>

  build-connector-mac:
    macos:
      xcode: 12.5.1
    parameters:
      slnname:
        type: string
      projname:
        type: string
        default: ""
      slug:
        type: string
        default: ""
      installer:
        type: boolean
        default: false
      converter-files:
        type: string
        default: ""
      installername:
        type: string
        default: ""
      build-config:
        type: string
        default: Release
      build-with-mono:
        type: boolean
        default: true
      bundlename:
        type: string
        default: ""
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - run:
          name: Install dotnet and brew dependencies
          command: |
            HOMEBREW_NO_AUTO_UPDATE=1 
            curl -sSL https://dot.net/v1/dotnet-install.sh | bash /dev/stdin --channel Current
            brew install create-dmg

            $HOME/.dotnet/dotnet --version
            $HOME/.dotnet/dotnet --list-runtimes
            $HOME/.dotnet/dotnet --list-sdks
      - when:
          condition: << parameters.build-with-mono >>
          steps:
            - run:
                name: Install mono
                command: |
                  HOMEBREW_NO_AUTO_UPDATE=1 brew install mono mono-libgdiplus
      - run:
          name: Set environment variables
          command: |
            TAG=$(if [ "${CIRCLE_TAG}" ]; then echo $CIRCLE_TAG; else echo "2.0.999"; fi;)
            SEMVER=$(echo "$TAG" | sed -e 's/\/[a-zA-Z-]*//')
            VER=$(echo "$SEMVER" | sed -e 's/-beta//')
            VERSION=$(echo $VER.$WORKFLOW_NUM)
            CHANNEL=$(if [[ "$VERSION" == *"-"* ]]; then echo $(cut -d "-" -f2 \<\<\< $VERSION); else echo latest; fi)
            mkdir -p speckle-sharp-ci-tools/Installers/<< parameters.slug >>
          environment:
            WORKFLOW_NUM: << pipeline.number >>
      - when:
          condition: << parameters.build-with-mono >>
          steps:
            - run:
                name: Build << parameters.slnname >>
                command: |
                  TAG=$(if [ "${CIRCLE_TAG}" ]; then echo $CIRCLE_TAG; else echo "2.0.999"; fi;)
                  SEMVER=$(echo "$TAG" | sed -e 's/\/[a-zA-Z-]*//')
                  msbuild << parameters.slnname >>/<< parameters.slnname >>.sln /r /p:Configuration='<< parameters.build-config >>' /p:WarningLevel=0 /p:IsDesktopBuild=false /p:Version=$SEMVER
            # Compress build files
            - run:
                name: Zip Objects Kit files
                command: |
                  zip -j Objects.zip << parameters.converter-files >>
            - run:
                name: Zip Connector files
                command: |
                  cd << parameters.slnname >>/<< parameters.projname >>/bin/
                  zip -r <<parameters.slug>>.zip ./
            # Copy installer files
            - run:
                name: Copy files to installer
                command: |
                  mkdir -p speckle-sharp-ci-tools/Mac/<<parameters.installername>>/.installationFiles/
                  cp Objects.zip speckle-sharp-ci-tools/Mac/<<parameters.installername>>/.installationFiles
                  cp << parameters.slnname >>/<< parameters.projname >>/bin/<<parameters.slug>>.zip speckle-sharp-ci-tools/Mac/<<parameters.installername>>/.installationFiles
      - unless:
          condition: << parameters.build-with-mono >>
          steps:
            - run:
                name: Publish x64 and arm64
                command: |
                  TAG=$(if [ "${CIRCLE_TAG}" ]; then echo $CIRCLE_TAG; else echo "2.0.999.$WORKFLOW_NUM"; fi;)
                  SEMVER=$(echo "$TAG" | sed -e 's/\/[a-zA-Z-]*//')
                  $HOME/.dotnet/dotnet publish << parameters.slnname >>/<< parameters.slnname >>/<< parameters.projname >>.csproj -c Release -v q -r osx-x64 --self-contained /p:WarningLevel=0 /p:Version=$SEMVER
                environment:
                  WORKFLOW_NUM: << pipeline.number >>
            #      $HOME/.dotnet/dotnet msbuild << parameters.slnname >>/<< parameters.slnname >>/<< parameters.projname >>.csproj -t:BundleApp -p:Configuration=Release -p:RuntimeIdentifier=osx-x64 -p:SelfContained=true /p:WarningLevel=0 -p:Version=$TAG
            #      $HOME/.dotnet/dotnet publish << parameters.slnname >>/<< parameters.slnname >>/<< parameters.projname >>.csproj -c Release -v q -r osx-arm64 --self-contained /p:WarningLevel=0 /p:Version=$TAG
            #      $HOME/.dotnet/dotnet msbuild << parameters.slnname >>/<< parameters.slnname >>/<< parameters.projname >>.csproj -t:BundleApp -p:Configuration=Release -p:RuntimeIdentifier=osx-arm64 -p:SelfContained=true /p:WarningLevel=0 -p:Version=$TAG
            # see: https://www.kenmuse.com/blog/notarizing-dotnet-console-apps-for-macos/
            # merges the binaries inside the arm64 .app and then moves it up to the top level folder
            # need to update dotnet to avoid an issue while lipo-ing the universal binaries
            #- run:
            #    name: Lipo Merge Binaries
            #    command: |
            #      lipo -create -output "./<< parameters.slnname >>/<< parameters.slnname >>/bin/Release/net6.0/osx-arm64/publish/<< parameters.bundlename >>/Contents/MacOS/<< parameters.projname >>" "./<< parameters.slnname >>/<< parameters.slnname >>/bin/Release/net6.0/osx-arm64/publish/<< parameters.bundlename >>/Contents/MacOS/<< parameters.projname >>" "./<< parameters.slnname >>/<< parameters.slnname >>/bin/Release/net6.0/osx-x64/publish/<< parameters.bundlename >>/Contents/MacOS/<< parameters.projname >>"
            # Compress build files
            - run:
                name: Zip Connector files
                command: |
                  cd "<< parameters.slnname >>/<< parameters.slnname >>/bin/Release/net6.0/osx-x64/publish"
                  zip -r << parameters.slug >>-mac.zip "./"
            # Copy installer files
            - run:
                name: Copy files to installer
                command: |
                  mkdir -p speckle-sharp-ci-tools/Mac/<< parameters.installername >>/.installationFiles/
                  cp << parameters.slnname >>/<< parameters.slnname >>/bin/Release/net6.0/osx-x64/publish/<< parameters.slug >>-mac.zip speckle-sharp-ci-tools/Mac/<<parameters.installername>>/.installationFiles
      # Create installer
      - run:
          name: Build Mac installer
          command: ~/.dotnet/dotnet publish speckle-sharp-ci-tools/Mac/<<parameters.installername>>/<<parameters.installername>>.sln -r osx-x64 -c Release
      - run:
          name: Zip installer
          command: |
            cd speckle-sharp-ci-tools/Mac/<<parameters.installername>>/bin/Release/net6.0/osx-x64/publish/
            zip -r <<parameters.slug>>.zip ./
      - store_artifacts:
          path: speckle-sharp-ci-tools/Mac/<<parameters.installername>>/bin/Release/net6.0/osx-x64/publish/<<parameters.slug>>.zip
      - run:
          name: Copy to installer location
          command: |
            TAG=$(if [ "${CIRCLE_TAG}" ]; then echo $CIRCLE_TAG; else echo "2.0.999.$WORKFLOW_NUM"; fi;)
            SEMVER=$(echo "$TAG" | sed -e 's/\/[a-zA-Z-]*//')
            cp speckle-sharp-ci-tools/Mac/<<parameters.installername>>/bin/Release/net6.0/osx-x64/publish/<<parameters.slug>>.zip speckle-sharp-ci-tools/Installers/<< parameters.slug >>/<<parameters.slug>>-$SEMVER.zip
          environment:
            WORKFLOW_NUM: << pipeline.number >>
      - when:
          condition: << pipeline.git.tag >>
          steps:
            - persist_to_workspace:
                root: ./
                paths:
                  - speckle-sharp-ci-tools/Installers

  get-ci-tools: # Clones our ci tools and persists them to the workspace
    docker:
      - image: cimg/base:2021.01
    steps:
      - add_ssh_keys:
          fingerprints:
            - "62:b2:1a:86:b7:9f:83:91:9b:61:f8:52:66:38:78:64"
      - run:
          name: I know Github as a host
          command: |
            mkdir ~/.ssh
            ssh-keyscan github.com >> ~/.ssh/known_hosts
      - run: # Could not get ssh to work, so using a personal token
          name: Clone
          command: git clone git@github.com:specklesystems/speckle-sharp-ci-tools.git speckle-sharp-ci-tools
      - persist_to_workspace:
          root: ./
          paths:
            - speckle-sharp-ci-tools

  build-archicad-add-on: # build Archicad C++ add-on
    parameters:
      e:
        type: string
        default: win/default
      archicadversion:
        type: string
        default: ""
    executor:
      name: << parameters.e >>
      shell: bash.exe
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - run:
          name: Install cmake
          command: |
            choco install cmake -y
      - run:
          name: Get Archicad devkit
          command: |
            mkdir Resources
            cd Resources
            curl -o Archicad<<parameters.archicadversion>>DevKit.zip https://releases.speckle.dev/build-utils/Archicad<<parameters.archicadversion>>DevKit.zip
            unzip Archicad<<parameters.archicadversion>>DevKit.zip -d Archicad<<parameters.archicadversion>>DevKit
      - run:
          name: Generate cmake files
          command: |
            cd ConnectorArchicad/AddOn
            mkdir Build.Win.x64.<<parameters.archicadversion>>
            export PATH=$PATH:"C:\Program Files\CMake\bin"
            cmake -B "./Build.Win.x64.<<parameters.archicadversion>>/" -A "x64" -T "v142" -DAC_API_DEVKIT_DIR="../../Resources/Archicad<<parameters.archicadversion>>DevKit" -DAC_MDID_DEV=$GRAPHISOFT_DEV_ID -DAC_MDID_LOC=$GRAPHISOFT_ADDON_ID
      - run:
          name: Build add-on
          command: |
            cd ConnectorArchicad/AddOn
            "C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/MSBuild/Current/Bin/MSBuild.exe" "Build.Win.x64.<<parameters.archicadversion>>/Speckle Connector.sln" -property:Configuration=Release
      - persist_to_workspace:
          root: ./
          paths:
            - ConnectorArchicad/AddOn/Build.Win.x64.<<parameters.archicadversion>>

  build-archicad-add-on-mac: # build Archicad C++ add-on
    macos:
      xcode: 12.5.1
    parameters:
      archicadversion:
        type: string
        default: ""
      slug:
        type: string
        default: ""
      installername:
        type: string
        default: ""
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - run:
          name: Install cmake
          command: |
            brew install cmake
      - run:
          name: Get Archicad devkit
          command: |
            mkdir Resources
            cd Resources
            curl -o Archicad<<parameters.archicadversion>>DevKitMac.zip https://releases.speckle.dev/build-utils/Archicad<<parameters.archicadversion>>DevKitMac.zip
            unzip Archicad<<parameters.archicadversion>>DevKitMac.zip -d Archicad<<parameters.archicadversion>>DevKitMac
      - run:
          name: Generate cmake files
          command: |
            cd ConnectorArchicad/AddOn
            mkdir Build.macOS.x64.<<parameters.archicadversion>>
            cmake -B "./Build.macOS.x64.<<parameters.archicadversion>>/" -G 'Xcode' -DCMAKE_OSX_ARCHITECTURES=x86_64 -DAC_API_DEVKIT_DIR="../../Resources/Archicad<<parameters.archicadversion>>DevKitMac" -DAC_MDID_DEV=$GRAPHISOFT_DEV_ID -DAC_MDID_LOC=$GRAPHISOFT_ADDON_ID
      - run:
          name: Build add-on
          command: |
            cd ConnectorArchicad/AddOn
            xcodebuild -scheme ALL_BUILD -configuration Release -project Build.macOS.x64.<<parameters.archicadversion>>/Speckle\ Connector.xcodeproj build
      # Compress build files
      - run:
          name: Zip Connector files
          command: |
            cd ConnectorArchicad/AddOn/Build.macOS.x64.<< parameters.archicadversion >>/Release
            zip -r << parameters.slug >>-<< parameters.archicadversion >>-mac.zip ./Speckle\ Connector.bundle
      # Copy installer files
      - run:
          name: Copy files to installer
          command: |
            mkdir -p speckle-sharp-ci-tools/Mac/<< parameters.installername >>/.installationFiles/
            cp ConnectorArchicad/AddOn/Build.macOS.x64.<< parameters.archicadversion >>/Release/<< parameters.slug >>-<<parameters.archicadversion>>-mac.zip speckle-sharp-ci-tools/Mac/<< parameters.installername >>/.installationFiles
      - persist_to_workspace:
          root: ./
          paths:
            - speckle-sharp-ci-tools/Mac/<< parameters.installername >>/.installationFiles/

  deploy-connectors: # Uploads all installers found to S3
    docker:
      - image: cimg/base:2021.01
    steps:
      - run:
          name: Proceed to deploy
          command: echo "This step is just here to wait for all build jobs before proceeding to deploy each of them individually. If a job fails, no connector will be deployed."

# The main workflows for our monorepo pipeline.
# There should be at least one workflow per project in the monorepo. Each workflow should be run only when a boolean parameter is passed that corresponds to the pattern 'run_{PROJECT_NAME}'.
# These parameters are set by the 'selective-ci' job.
workflows:
  build:
    jobs:
      - get-ci-tools:
          context: github-dev-bot
      - build-core:
          requires:
            - get-ci-tools
      - build-objects:
          requires:
            - build-core
      - build-desktopui:
          requires:
            - build-core
  nuget:
    jobs:
      # CORE Nuget Publish
      - build-core:
          name: nuget-deploy-core
          filters:
            branches:
              ignore: /.*/ # For testing only: /ci\/.*/
            tags:
              only: /^(nuget-core|nugets)\/([0-9]+)\.([0-9]+)\.([0-9]+)(?:-\w{1,10})?$/
          post-steps:
            - packandpublish:
                projectfilepath: Core/Core.sln
          context: nuget
      - build-objects:
          name: nuget-deploy-objects
          filters:
            branches:
              ignore: /.*/ # For testing only: /ci\/.*/
            tags:
              only: /^(nuget-objects|nugets)\/([0-9]+)\.([0-9]+)\.([0-9]+)(?:-\w{1,10})?$/
          post-steps:
            - packandpublish-bash:
                projectfilepath: Objects/Objects.sln
          context: nuget
      - build-desktopui:
          name: nuget-deploy-desktopui
          filters:
            branches:
              ignore: /.*/ # For testing only: /ci\/.*/
            tags:
              only: /^(nuget-dui|nugets)\/([0-9]+)\.([0-9]+)\.([0-9]+)(?:-\w{1,10})?$/
          post-steps:
            - packandpublish:
                projectfilepath: DesktopUI2/DesktopUI2/DesktopUI2.csproj
          context: nuget
# VS Code Extension Version: 1.4.0
