version: 2.1

orbs:
  # Swissknife is the orb that handles per-project change detection
  swissknife: roopakv/swissknife@0.54.0
  # jq is required to be installed to use some swissknife functions.
  jq: circleci/jq@2.2.0
  # Using windows for builds
  win: circleci/windows@2.4.0
  # Upload artifacts to s3
  aws-s3: circleci/aws-s3@2.0.0
  codecov: codecov/codecov@3.2.2

# adapted from https://circleci.com/developer/orbs/orb/storytel/nugetpublish#commands-packandpublish
commands:
  packandpublish:
    parameters:
      projectfilepath:
        type: string
    steps:
      - run:
          name: Publish nuget package
          command: |
            $tag = if([string]::IsNullOrEmpty($env:CIRCLE_TAG)) { "a/0.0.$($env:CIRCLE_BUILD_NUM)-beta" } else { $env:CIRCLE_TAG }
            $version = $tag.Split("/")[1]  
            dotnet pack -c Release /p:Version="$version" -o $HOME/output <<parameters.projectfilepath>> 
            cd $HOME/output
            dotnet nuget push **/*.nupkg -s https://api.nuget.org/v3/index.json -k $env:NUGET_APIKEY -n true


# Parameters of our pipeline. Most of them are booleans that indicate which project to build/test with the pattern 'run_{PROJECT_NAME}'
parameters:
  # This parameter is initially set to true to run the 'ci' workflow. After first execution, the parameter will be set to false, preventing multiple executions of the selective-ci job on the same commit.
  run_trigger_workflow:
    type: boolean
    default: true

  # Per project flag parameters
  run_core:
    type: boolean
    default: false
  run_objects:
    type: boolean
    default: false
  run_connector_gh:
    type: boolean
    default: false
  run_connector_revit:
    type: boolean
    default: false
  run_connector_dynamo:
    type: boolean
    default: false
  run_connector_rhino:
    type: boolean
    default: false
  run_connector_autocadcivil:
    type: boolean
    default: false
  run_connector_etabs:
    type: boolean
    default: false
  run_connector_microstation:
    type: boolean
    default: false

jobs: # Each project will have individual jobs for each specific task it has to execute (build, release...)
  
  selective-ci: # The job that selects which job to run
    docker:
      - image: mcr.microsoft.com/dotnet/core/sdk:3.1-focal
    steps:
      - checkout
      - jq/install
      - swissknife/trigger-workflows-for-all-modified:
          additional-param-map: '{"run_trigger_workflow": false}'
          code-param-name-map: '[
            {"regex": "Objects/.*", "param_name": "run_objects"},
            {"regex": "Core/.*", "param_name": "run_core"},
            {"regex": "ConnectorGrasshopper/.*", "param_name": "run_connector_gh"},
            {"regex": "ConnectorDynamo/.*", "param_name": "run_connector_dynamo"},
            {"regex": "ConnectorRevit/.*", "param_name": "run_connector_revit"},
            {"regex": "ConnectorRhino/.*", "param_name": "run_connector_rhino"},
            {"regex": "ConnectorAutocadCivil/.*", "param_name": "run_connector_autocadcivil"},
            {"regex": "ConnectorETABS/.*", "param_name": "run_connector_etabs"},
            {"regex": "ConnectorMicroStation/.*", "param_name": "run_connector_microstation"}
          ]'
          base-branch: 'main'
  
  build-core:
    executor: # Using a win executor since there are post-steps in the nuget workflow that use powershell
      name: win/default
      shell: powershell.exe
    steps:
      - checkout
      - run: 
          name: Build Core
          command: dotnet build Core/Core.sln -c Release -v q

  test-core: 
    docker:
      - image: 'mcr.microsoft.com/dotnet/core/sdk' # dotnet core 3.1 sdk
      - image: 'mcr.microsoft.com/dotnet/core/sdk:2.1-focal' # dotnet core 2.1 sdk (for netstandard support on build)
      # Node, redis, postgres and speckle-server images for test server
      - image: 'circleci/node:12'
      - image: 'circleci/redis:6'
      - image: 'circleci/postgres:12'
        environment:
          POSTGRES_DB: speckle2_test
          POSTGRES_PASSWORD: speckle
          POSTGRES_USER: speckle
      - image: 'speckle/speckle-server:latest'
        command: ["bash", "-c", "/wait && node bin/www"]
        environment:
          POSTGRES_URL: "localhost"
          POSTGRES_USER: "speckle"
          POSTGRES_PASSWORD: "speckle"
          POSTGRES_DB: "speckle2_test"
          REDIS_URL: "redis://localhost"
          SESSION_SECRET: 'keyboard cat'
          STRATEGY_LOCAL: "true"
          CANONICAL_URL: 'http://localhost:3000'
          WAIT_HOSTS: localhost:5432, localhost:6379
    steps:
      - checkout 
      - run: 
          name: Unit Test
          command: dotnet test Core/Tests/TestsUnit.csproj -c Release -v q --logger:"junit;LogFileName={assembly}.results.xml" --results-directory=TestResults --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
      - run:
          name: Integration Tests # The integration tests are runinng on our test sevrer
          command: dotnet test Core/IntegrationTests/TestsIntegration.csproj -c Release -v q --logger:"junit;LogFileName={assembly}.results.xml" --results-directory=TestResults --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
      - store_test_results:
          path: TestResults
      - store_artifacts:
          path: TestResults

      - codecov/upload

  build-objects:
    executor:
      name: win/default
      shell: powershell.exe
    steps:
      - checkout
      - run: 
          name: Build Objects
          command: dotnet build Objects/Objects.sln -c Release /p:IsDesktopBuild=false -v q

  build-desktopui:
    executor:
      name: win/default
      shell: powershell.exe
    steps:
      - checkout
      - run: 
          name: Restore DesktopUI
          command: nuget restore DesktopUI/DesktopUI.sln
      - run: 
          name: Build DesktopUI
          command: msbuild DesktopUI/DesktopUI.sln /p:Configuration=Release /p:WarningLevel=0 /p:IsDesktopBuild=false
      - run:
          name: Publish nuget package
          command: |
            $tag = if([string]::IsNullOrEmpty($env:CIRCLE_TAG)) { "a/0.0.$($env:CIRCLE_BUILD_NUM)-beta" } else { $env:CIRCLE_TAG }
            $version = $tag.Split("/")[1]  
            nuget pack DesktopUI/DesktopUI/DesktopUI.csproj -OutputDirectory $HOME/output -Version $version -Properties Configuration=Release
            cd $HOME/output
            nuget push **/*.nupkg -src https://api.nuget.org/v3/index.json -ApiKey $env:NUGET_APIKEY

  build-connector: # Reusable job for basic connectors
    executor:
      name: win/default
      shell: powershell.exe
    parameters:
      slnname:
        type: string
      dllname:
        type: string
      slug:
        type: string
        default: ''
      installer:
        type: boolean
        default: false
    steps:
      - checkout
      - run: 
          name: Restore << parameters.slnname >>
          command: nuget restore << parameters.slnname >>/<< parameters.slnname >>.sln
      - run: 
          name: Build << parameters.slnname >>
          command: |
            $tag = if([string]::IsNullOrEmpty($env:CIRCLE_TAG)) { "0.0.0" } else { $env:CIRCLE_TAG }
            $semver = if($tag.Contains('/')) {$tag.Split("/")[1] } else { $tag }
            $ver = $semver.replace("-beta","")
            $version = "$($ver).$($env:CIRCLE_BUILD_NUM)"
            msbuild << parameters.slnname >>/<< parameters.slnname >>.sln /p:Configuration=Release /p:WarningLevel=0 /p:IsDesktopBuild=false /p:AssemblyVersionNumber=$version /p:AssemblyInformationalVersion=$semver /p:Version=$version
            $channel = "latest"
            if($env:CIRCLE_TAG -like "*-beta") { $channel = "beta" }    
            if(-Not [string]::IsNullOrEmpty($env:CIRCLE_TAG)) { New-Item -Force "speckle-sharp-ci-tools/Installers/<< parameters.slug >>/$channel.yml" -ItemType File -Value "version: $semver" }
      - run: 
          name: Deploy?
          command: | # stop job if not triggered by deployment workflow (parameters.installer == false)
            if (-Not [System.Convert]::ToBoolean('<< parameters.installer >>') ) { 
            circleci-agent step halt 
            Write-Host "Job stopped gracefully"
            } else { Write-Host "Job continuing" }
      - attach_workspace:
          at: ./
      - run: # Creates the inno installer
          name: InnoSetup
          command: speckle-sharp-ci-tools\InnoSetup\ISCC.exe speckle-sharp-ci-tools\%SLUG%.iss /Sbyparam=$p    
          shell: cmd.exe #does not work in powershell
          environment:
            SLUG: << parameters.slug >>
      - persist_to_workspace:
          root: ./
          paths:
            - speckle-sharp-ci-tools/Installers

  get-ci-tools: # Clones our ci tools and persists them to the workspace
    docker:
      - image: cimg/base:2021.01
    steps:
      - run: # Could not get ssh to work, so using a personal token 
          name: Clone
          command: git clone https://$GITHUB_TOKEN@github.com/specklesystems/speckle-sharp-ci-tools.git speckle-sharp-ci-tools
      - persist_to_workspace:
          root: ./
          paths:
            - speckle-sharp-ci-tools

  deploy: # Uploads all installers found to S3
    docker:
      - image: cimg/base:2021.01
    steps:    
      - attach_workspace:
          at: ./
      - run: 
          name: List contents
          command: ls -R speckle-sharp-ci-tools/Installers
      - aws-s3/copy:
          arguments: '--recursive --endpoint=https://$SPACES_REGION.digitaloceanspaces.com --acl public-read'
          aws-access-key-id: SPACES_KEY
          aws-region: SPACES_REGION
          aws-secret-access-key: SPACES_SECRET
          from: '"speckle-sharp-ci-tools/Installers/"'
          to: s3://speckle-releases/installers/


# The main workflows for our monorepo pipeline.
# The main workflow is called 'ci': It is the workflow responsible of determining which projects to build/test.
# There should be at least one workflow per project in the monorepo. Each workflow should be run only when a boolean parameter is passed that corresponds to the pattern 'run_{PROJECT_NAME}'. 
# These parameters are set by the 'selective-ci' job.
workflows:
  # Main workflow. Must be conditioned to the 'run_trigger_workflow' parameter to prevent recursive execution of the job.
  ci:
    when: << pipeline.parameters.run_trigger_workflow >>
    jobs:
      # This job will only run on PRs
      - selective-ci
  # Objects - Build/Test
  objects:
    when: << pipeline.parameters.run_objects >>
    jobs:
      - build-objects
  
  # Core - Build/Test
  core:
    when: << pipeline.parameters.run_core >>
    jobs:
      - build-core
      - test-core:
          requires:
            - build-core
  
  # Grasshopper connector - Build/Test
  connector_grasshopper:
    when: << pipeline.parameters.run_connector_gh >>
    jobs:
      - build-connector:
          name: build-connector-grasshopper
          slnname: ConnectorGrasshopper
          dllname: SpeckleConnectorGrasshopper.gha 
  
  # Rhino connector - Build/Test
  connector_rhino:
    when: << pipeline.parameters.run_connector_rhino >>
    jobs:
      - build-connector:
          name: build-connector-rhino
          slnname: ConnectorRhino
          dllname: SpeckleConnectorRhino.rhp 

  # Dynamo connector - Build/Test
  connector_dynamo:
    when: << pipeline.parameters.run_connector_dynamo >>
    jobs:
      - build-connector:
          name: build-connector-dynamo
          slnname: ConnectorDynamo
          dllname: SpeckleConnectorDynamo.dll 
  
  # Revit Connector - Build/Test
  connector_revit:
    when: << pipeline.parameters.run_connector_revit >>
    jobs:
      - build-connector:
          name: build-connector-revit
          slnname: ConnectorRevit
          dllname: SpeckleConnectorRevit.dll 

  # AutoCAD & Civil3D Connector - Build/Test
  connector_autocadcivil:
    when: << pipeline.parameters.run_connector_autocadcivil >>
    jobs:
      - build-connector:
          name: build-connector-autocadcivil
          slnname: ConnectorAutocadCivil
          dllname: SpeckleConnectorCivil.dll
  
  # ETABS Connector - Build/Test
  connector_etabs:
    when: << pipeline.parameters.run_connector_etabs>>
    jobs:
      - build-connector: 
          name: build-connector-etabs
          slnname: ConnectorETABS
          dllname: SpeckleConnectorETABS.dll

  # MicroStation Connector - Build/Test
  connector_microstation:
    when: << pipeline.parameters.run_connector_microstation>>
    jobs:
      - build-connector: 
          name: build-connector-microstation
          slnname: ConnectorMicroStation
          dllname: SpeckleConnectorOpenRoads.dll

  nuget:
    jobs:
      # CORE Nuget Publish        
      - build-core:
          name: nuget-deploy-core
          filters:
            branches:
              ignore: /.*/ # For testing only: /ci\/.*/
            tags: 
              only: /^(core|nugets)\/([0-9]+)\.([0-9]+)\.([0-9]+)(?:-\w{1,10})?$/ 
          post-steps:
            - packandpublish: 
                projectfilepath: Core/Core.sln
      - build-objects:
          name: nuget-deploy-objects
          filters:
            branches:
              ignore: /.*/ # For testing only: /ci\/.*/
            tags:
              only: /^(objects|nugets)\/([0-9]+)\.([0-9]+)\.([0-9]+)(?:-\w{1,10})?$/ 
          post-steps:
            - packandpublish: 
                projectfilepath: Objects/Objects.sln
      - build-desktopui:
          name: nuget-deploy-desktopui
          filters:
            branches:
              ignore: /.*/ # For testing only: /ci\/.*/
            tags:
              only: /^(desktopui|nugets)\/([0-9]+)\.([0-9]+)\.([0-9]+)(?:-\w{1,10})?$/ 

  # Makes installers based on which tag is provided
  # Tag has to be provided in the format "appname/1.0.0"
  # If the tag is in the format "all/1.0.0", all connectors will be deployed with the same version number
  deployment:
    jobs:
      - get-ci-tools:
          filters:
            branches:
              ignore: /.*/ # For testing only: /ci\/.*/
            tags: # runs on any tag in the format "xyz/1.0.0" or "xyz/1.0.0-beta" -- TO UPDATE IDENTICAL LINE AT BOTTOM --        
              only: /^(all|dynamo|revit|grasshopper|rhino|autocadcivil|revitdynamo|rhinogh|etabs|microstation|openbuildings|openrail|openroads|bentley)\/([0-9]+)\.([0-9]+)\.([0-9]+)(?:-beta)?$/

      # DYNAMO Build&Deploy
      - build-connector:
          name: build-deploy-connector-dynamo
          slnname: ConnectorDynamo 
          dllname: SpeckleConnectorDynamo.dll 
          slug: dynamo
          installer: true
          requires: 
            - get-ci-tools
          filters:
            branches:
              ignore: /.*/ # For testing only! /ci\/.*/
            tags:
              only: /^(dynamo|revitdynamo|all)\/([0-9]+)\.([0-9]+)\.([0-9]+)(?:-beta)?$/         

      # REVIT Build&Deploy
      - build-connector:
          name: build-deploy-connector-revit
          slnname: ConnectorRevit 
          dllname: SpeckleConnectorRevit.dll 
          slug: revit
          installer: true
          requires: 
            - get-ci-tools
          filters:
            branches:
              ignore: /.*/ # For testing only! /ci\/.*/
            tags:
              only: /^(revit|revitdynamo|all)\/([0-9]+)\.([0-9]+)\.([0-9]+)(?:-beta)?$/

      # GRASSHOPPER Build&Deploy
      - build-connector:
          name: build-deploy-connector-grasshopper
          slnname: ConnectorGrasshopper
          dllname: SpeckleConnectorGrasshopper.gha 
          slug: grasshopper
          installer: true
          requires: 
            - get-ci-tools
          filters:
            branches:
              ignore: /.*/ # For testing only! /ci\/.*/
            tags:
              only: /^(grasshopper|rhinogh|all)\/([0-9]+)\.([0-9]+)\.([0-9]+)(?:-beta)?$/

      # RHINO Build&Deploy
      - build-connector:
          name: build-deploy-connector-rhino
          slnname: ConnectorRhino 
          dllname: SpeckleConnectorRhino.rhp 
          slug: rhino
          installer: true
          requires: 
            - get-ci-tools
          filters:
            branches:
              ignore: /.*/ # For testing only! /ci\/.*/
            tags:
              only: /^(rhino|rhinogh|all)\/([0-9]+)\.([0-9]+)\.([0-9]+)(?:-beta)?$/

      # AUTOCAD Build&Deploy
      - build-connector:
          name: build-deploy-connector-autocad
          slnname: ConnectorAutocadCivil 
          dllname: SpeckleConnectorAutocad.dll
          slug: autocad
          installer: true
          requires: 
            - get-ci-tools
          filters:
            branches:
              ignore: /.*/ # For testing only! /ci\/.*/
            tags:
              only: /^(autocadcivil|all)\/([0-9]+)\.([0-9]+)\.([0-9]+)(?:-beta)?$/

      # CIVIL 3D Build&Deploy
      - build-connector:
          name: build-deploy-connector-civil3d
          slnname: ConnectorAutocadCivil 
          dllname: SpeckleConnectorCivil.dll
          slug: civil3d
          installer: true
          requires: 
            - get-ci-tools
          filters:
            branches:
              ignore: /.*/ # For testing only! /ci\/.*/
            tags:
              only: /^(autocadcivil|all)\/([0-9]+)\.([0-9]+)\.([0-9]+)(?:-beta)?$/
            
      # ETABS Build&Deploy
      - build-connector:
          name: build-deploy-connector-etabs
          slnname: ConnectorETABS
          dllname: SpeckleConnectorETABS.dll
          slug: etabs
          installer: true
          requires: 
            - get-ci-tools
          filters:
            branches:
              ignore: /.*/ # For testing only! /ci\/.*/
            tags:
              only: /^(etabs|all)\/([0-9]+)\.([0-9]+)\.([0-9]+)(?:-beta)?$/

      # MICROSTATION Build&Deploy
      - build-connector:
          name: build-deploy-connector-microstation
          slnname: ConnectorMicroStation
          dllname: SpeckleConnectorMicroStation.dll
          slug: microstation
          installer: true
          requires: 
            - get-ci-tools
          filters:
            branches:
              ignore: /.*/ # For testing only! /ci\/.*/
            tags:
              only: /^(microstation|bentley|all)\/([0-9]+)\.([0-9]+)\.([0-9]+)(?:-beta)?$/

      # OPENBUILDINGS Build&Deploy
      - build-connector:
          name: build-deploy-connector-openbuildings
          slnname: ConnectorMicroStation
          dllname: SpeckleConnectorOpenBuildings.dll
          slug: openbuildings
          installer: true
          requires: 
            - get-ci-tools
          filters:
            branches:
              ignore: /.*/ # For testing only! /ci\/.*/
            tags:
              only: /^(openbuildings|bentley|all)\/([0-9]+)\.([0-9]+)\.([0-9]+)(?:-beta)?$/
      
      # OPENRAIL Build&Deploy
      - build-connector:
          name: build-deploy-connector-openrail
          slnname: ConnectorMicroStation
          dllname: SpeckleConnectorOpenRail.dll
          slug: openrail
          installer: true
          requires: 
            - get-ci-tools
          filters:
            branches:
              ignore: /.*/ # For testing only! /ci\/.*/
            tags:
              only: /^(openrail|bentley|all)\/([0-9]+)\.([0-9]+)\.([0-9]+)(?:-beta)?$/

      # OPENROADS Build&Deploy
      - build-connector:
          name: build-deploy-connector-openroads
          slnname: ConnectorMicroStation
          dllname: SpeckleConnectorOpenRoads.dll
          slug: openroads
          installer: true
          requires: 
            - get-ci-tools
          filters:
            branches:
              ignore: /.*/ # For testing only! /ci\/.*/
            tags:
              only: /^(openroads|bentley|all)\/([0-9]+)\.([0-9]+)\.([0-9]+)(?:-beta)?$/
     
      # DEPLOY ALL CONNECTORS
      - deploy: # Will run if all the triggered workflows succeed
          requires: 
            - get-ci-tools
            - build-deploy-connector-dynamo
            - build-deploy-connector-revit
            - build-deploy-connector-grasshopper
            - build-deploy-connector-rhino
            - build-deploy-connector-autocad
            - build-deploy-connector-civil3d
            - build-deploy-connector-etabs
            - build-deploy-connector-microstation
            - build-deploy-connector-openbuildings
            - build-deploy-connector-openrail
            - build-deploy-connector-openroads
          filters:
            tags: # runs on any tag in the format "xyz/1.0.0" or "xyz/1.0.0-beta" -- TO UPDATE IDENTICAL LINE AT ~380  --    
              only: /^(all|dynamo|revit|grasshopper|rhino|autocadcivil|revitdynamo|rhinogh|etabs|microstation|openbuildings|openrail|openroads|bentley)\/([0-9]+)\.([0-9]+)\.([0-9]+)(?:-beta)?$/
