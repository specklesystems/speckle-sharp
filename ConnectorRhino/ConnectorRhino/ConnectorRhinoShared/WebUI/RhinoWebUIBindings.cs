using System;
using System.Linq;
using System.Runtime.InteropServices;
using System.Threading.Tasks;
using DesktopUI2.Models;
using DesktopUI2.ViewModels;
using Speckle.Core.Api;
using Speckle.Core.Credentials;
using SpeckleRhino;

#if RHINO7 && !MAC
namespace Speckle.ConnectorRhino.UI
{
  [ClassInterface(ClassInterfaceType.AutoDual)]
  [ComVisible(true)]
  public class RhinoWebUIBindings : WebUI.WebUIBindings
  {

    public RhinoWebUIBindings()
    {
    }

    // sample callback from web UI
    public override async void SendStream()
    {
      try
      {

        NotifyUi("show-notification", "Creating stream & sending...");

        string _fileName = SpeckleRhinoConnectorPlugin.Instance.Bindings.GetFileName();
        var _fileStream = await CreateStream();

        var filters = SpeckleRhinoConnectorPlugin.Instance.Bindings.GetSelectionFilters();
        var selection = SpeckleRhinoConnectorPlugin.Instance.Bindings.GetSelectedObjects();

        _fileStream.Filter = filters.First(o => o.Slug == "all");
        _fileStream.CommitMessage = "Sent everything from DUI3";

        _fileStream.BranchName = "main";

        // set settings
        if (_fileStream.Settings == null || _fileStream.Settings.Count == 0)
        {
          var settings = SpeckleRhinoConnectorPlugin.Instance.Bindings.GetSettings();
          _fileStream.Settings = settings;
        }
        var Id = await Task.Run(() => SpeckleRhinoConnectorPlugin.Instance.Bindings.SendStream(_fileStream, new ProgressViewModel()));

        //var link = $"{_fileStream.Client.ServerUrl}/streams/{Id}";
        NotifyUi("show-notification", $"Sent everything!");
      }
      catch (Exception ex)
      {
        Serilog.Log.Error(ex, ex.Message);
        NotifyUi("show-notification", "Error: " + ex.Message);
      }
    }

    private async Task<StreamState> CreateStream()
    {
      // get default account
      var account = AccountManager.GetDefaultAccount();
      var client = new Client(account);


      // create the stream
      string streamId = await client.StreamCreate(new StreamCreateInput { description = "Autogenerated Stream for QuickSend", name = "DUI3 Test Stream", isPublic = false });
      var newStream = await client.StreamGet(streamId);

      return new StreamState(account, newStream) { BranchName = "main" };


    }

    public override void ShowAccountsPopup()
    {
      throw new NotImplementedException();
    }
  }
}
#endif
